1. 获取源码CompilationUnit集合
2. 扫描CompilationUnit的IMember，获取有用的信息
3. 为扫描到的IType建模
4. 为扫描到的IMethod建模
5. 建立IType与IType之间的关联
6. 建立IType与IMethod之间的关联
7. 建立IMethod与IMethod之间的关联

1. 分析服务端业务方法之间的关联关系，将无关的private，用依赖工具是无效的，需要自己写解析程序将XxxFactory.getRemoteInterface().method与XxxControllerBean._method()之间直接建立引用关系
2. 检查save()、submit()、delete()操作有没有被业务污染，基于1的结果，分析关联关系找到对应的_addnew()、_update()、_delete()方法是不是被重写
3. 检查_getValue()、_getCollection()、_getXxxInfo()有没有被重写
4. 基于1做一个eclipse的plug-in，能够通过ctrl+F3直接跳到对应实现类的方法声明处

能做的事不一定要做，只有为目标服务才会去做

User Story：
1. 为测试人员提供一个报告，标明所改动的代码会被哪些业务接口所调用，以及相关业务操作路径。
2. 为开发人员提供一个报告，标明每一个业务接口与其他业务接口之间的依赖情况，便于梳理业务与业务之间的关联（为重构及改BUG提供一定信息的参考文档）
3. 为开发人员提供一个报告，标明每一个业务接口与所调用的所有方法之间的关系，此报告是一个细粒度的报告，可以作为日常工作的参考文档使用，也可用做数据统计。如：统计出每一个业务接口与所调用的所有方法的代码行数，可得出其业务复杂度。或者基于SVN信息，得出哪些业务容易出问题。
功能拆分：
1. 根据元数据得到所有业务接口及描述
2. 为所有源代码建立AST
3. 统计结果关乎接口类、普通类、方法、方法之间的关联关系，为其建模
4. 基于2和3，扫描AST，为模型填充数据，建立关系
5. 基于1，识别出所有接口类
6. 基于4和5，对接口类特殊处理，识别其代码的关联关系
7. 为已有的业务接口及方法之间的关系，生成细粒度报告
8. 为已有的业务接口与业务接口之间的关系，生成粗粒度报告
9. 为某一方法找到所有调用它的业务接口